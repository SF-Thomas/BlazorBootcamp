@page "/learn/lifecycle"

<h3>Learn Life Cycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br/>
<button class="btn btn-primary" @onclick="StartCountdownAsync">Start countdown - @Count</button>

<div class="border">
    <LifeCycleChild CountValue="@currentCount"></LifeCycleChild>
</div>

@code {
    private int currentCount = 0;

    public int Count { get; set; } = 10;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized is called");
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync is called");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParametersSet is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("OnParametersSetAsync is called");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("OnAfterRender is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("OnAfterRenderAsync is called");
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender is called");
        return base.ShouldRender();
    }

    private void StartCountdownAsync()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    void TimeCallBack(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}
